package {module}

import java.io.{{File, InputStream, OutputStream}}
import java.lang.ProcessHandle
import java.nio.charset.StandardCharsets.UTF_8
import scala.util.control.Breaks.{{break, breakable}}

import org.newsclub.net.unix.{{AFUNIXSocket, AFUNIXSocketAddress, AFUNIXServerSocket}}
import chisel3.iotesters

class {module}Driver(c: {module}, args: Array[String]) extends iotesters.PeekPokeTester(c) {{

    private val uut = c

    private val _sock: AFUNIXSocket = AFUNIXSocket.newInstance()
    _sock.connect(new AFUNIXSocketAddress(new File(args(0))))

    private val istream: InputStream = _sock.getInputStream()
    private val ostream: OutputStream = _sock.getOutputStream()

    ostream.write(ProcessHandle.current().pid().toString.getBytes("UTF-8"))
    ostream.flush()

    var alive: Int = _
    var signal: String = _
    var _buf = new Array[Byte]({buf_size})
    var _read: Int = _

    breakable {{

        while (true) {{

            _read = istream.read(_buf)
            signal = new String(_buf, UTF_8)

            alive = signal.slice(0, 1).toInt
            signal = signal.slice(1, _read)

            if (alive == 0) {{
                break
            }}

            {inputs}
            step(1)

            ostream.write(({outputs}).getBytes("UTF-8"))
            ostream.flush()

        }}
    }}

    _buf = Array.empty[Byte]

}}

object {module}Main extends App {{
  iotesters.Driver.execute(args, () => new {module}) {{
    c => new {module}Driver(c, args)
  }}
}}
